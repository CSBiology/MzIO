[{"uri":"/MzIO/index.html","title":"index","content":"(**\n\nMzIO is a library that consists of a generic model which is based on the minimal amount of metadata, which different protein mass spectometry data formats share with each other. \nThe model is built up of different classes, each with a different function. The MzIOModel holds the global metadata of the experiment, e.g. the with of the isolation window and \nis saved as a Json based shadow file. The runID of the MzIOModel links it with the MassSpectrum. \nThe MassSpectrum is used to store the metadata of the different scans and is linked by its ID with the Peak1DArray. \nThe Peak1DArray contains in addition to the inensity and m/z values the compression mode and the data format of the values, e.g. float 32 or float 64.\n\n\nSamples \u0026 documentation\n-----------------------\n\nThe library comes with comprehensible documentation. \nIt can include tutorials automatically generated from \u0060*.fsx\u0060 files in [the content folder][content]. \nThe API reference is automatically generated from Markdown comments in the library implementation.\n\n * [Tutorial](tutorial.html) contains a further explanation of this sample library.\n\n * [API Reference](reference/index.html) contains automatically generated documentation for all types, modules\n   and functions in the library. This includes additional brief samples on using most of the\n   functions.\n \nContributing and copyright\n--------------------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding a new public API, please also \nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\nThe library is available under Public Domain license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/fsprojects/MzIO/tree/master/docs/content\n  [gh]: https://github.com/fsprojects/MzIO\n  [issues]: https://github.com/fsprojects/MzIO/issues\n  [readme]: https://github.com/fsprojects/MzIO/blob/master/README.md\n  [license]: https://github.com/fsprojects/MzIO/blob/master/LICENSE.txt\n*)"},{"uri":"/MzIO/tools/IMzIODataWriter.html","title":"IMzIODataWriter","content":"(***hide***)\n\n#r @\u0022../../../MzIO/src/MzIO/bin/Release/net45/MzIO.dll\u0022\n#r @\u0022../../../MzIO/src/MzIO.MzML/bin/Release/net45/MzIO.MzML.dll\u0022\n#r @\u0022../../../MzIO/src/MzIO.Processing/bin/Release/net45/MzIO.Processing.dll\u0022\nopen MzIO\nopen MzIO.IO.MzML\nlet writer = new MzMLWriter() :\u003E MzIO.IO.IMzIODataWriter\nlet peak1D = new Binary.Peak1DArray()\nlet peak2D = new Binary.Peak2DArray()\nlet massSpec = new Model.MassSpectrum()\nlet chromatogram = new Model.Chromatogram()\n\n(**\nAll writers in this project implement the interface of the IMzIODataWriter. It contains abstract members \nto interact with the data. Thus all writers can be used with the same processing functions.\n\n###InsertMass\n\nUses a spectrum ID to insert data from a Peak1DArray into a mass spectrum.\n*)\nwriter.InsertMass(\u0022spectrumID\u0022, massSpec, peak1D)\n(**\n###InsertChrom\n\nUses a chromatogram ID to insert data from a Peak2DArray into a chromatogram.\n*)\nwriter.InsertChrom(\u0022chromatogramID\u0022, chromatogram, peak2D)"},{"uri":"/MzIO/tools/IMzIODataReader.html","title":"IMzIODataReader","content":"(***hide***)\n\n#r @\u0022../../../MzIO/src/MzIO/bin/Release/net45/MzIO.dll\u0022\n#r @\u0022../../../MzIO/src/MzIO.MzML/bin/Release/net45/MzIO.MzML.dll\u0022\n#r @\u0022../../../MzIO/src/MzIO.Processing/bin/Release/net45/MzIO.Processing.dll\u0022\nopen MzIO\nopen MzIO.IO.MzML.MzML\nlet reader = new MzMLReader(\u0022samplestring\u0022) :\u003E MzIO.IO.IMzIODataReader\n\n(**\nAll readers in this project implement the interface of the IMzIODataReader. It contains abstract members \nto interact with the data. Thus all readers can be used with the same processing functions.\n\n###ReadMassSpectrum\n\nUses a spectrum ID to get a specific spectrum contained by the model.\n*)\nreader.ReadMassSpectrum \u0022spectrumID\u0022\n(**\nReturns a MassSpectrum which ID is equal to spectrumID or fails if no MassSpectrum has a fitting ID. This MassSpectrum does not contain intensity or m/z values but\ninformation about precusors, products and meta data information of the measured spectrum.\n\n###ReadMassSpectra\n\nUses a run ID to get all spectra contained by the model.\n*)\nreader.ReadMassSpectra \u0022runID\u0022\n(**\nThis function call returns a sequence of all spectra that are part of the same run. This doesn\u0027t include any intensity and m/z values but the metadata associated \nwith the spectra measurments.\n\n###ReadSpectrumPeaks\n\nUses a spectrum ID to get a Peak1DArray associated with a specific spectrum contained by the model.\n*)\nreader.ReadSpectrumPeaks \u0022spectrumID\u0022\n(**\nThis function call returns a Peak1DArray of the MassSpectrum. This class contains the intensity and m/z values and additional information, like the compression mode and data format\nof the values. By changing the compression mode the compression mode of the values will be altered when they get inserted into the SQLite database.\n\n###ReadMassSpectrumAsync\n\nUses a spectrum ID to get a specific spectrum contained by the model. This function is executed multiple times in parallel.\n*)\nreader.ReadMassSpectrumAsync \u0022spectrumID\u0022\n(**\nReturns a MassSpectrum which ID is equal to spectrumID or fails if no MassSpectrum has a fitting ID. This MassSpectrum does not contain intensity or m/z values but\ninformation about precusors, products and meta data information of the measured spectrum. The operation is executed in parellel to increase the speed.\n\n###ReadSpectrumPeaksAsync\n\nUses a spectrum ID to get a Peak1DArray associated with a specific spectrum contained by the model. This function is executed multiple times in parallel.\n*)\nreader.ReadSpectrumPeaksAsync \u0022spectrumID\u0022\n(**\nThis function call returns a Peak1DArray of the MassSpectrum. This class contains the intensity and m/z values and additional information, like the compression mode and data format\nof the values. By changing the compression mode the compression mode of the values will be altered when they get inserted into the SQLite database.\nThe operation is executed in parellel to increase the speed.\n\n\n###ReadChromatogram\n\nThe functions which are required to read a Chromatogram are not implemented yet.\n*)\nreader.ReadChromatograms            \u0022runID\u0022\nreader.ReadChromatogram             \u0022chromatogramID\u0022\nreader.ReadChromatogramPeaks        \u0022chromatogramID\u0022\nreader.ReadChromatogramAsync        \u0022chromatogramID\u0022\nreader.ReadChromatogramPeaksAsync   \u0022chromatogramID\u0022"},{"uri":"/MzIO/tools/installation.html","title":"Installation Guide\n","content":"(**\n# Installation Guide\n\nMzIO contains 7 different projects. 3 of those projects are essential for most practical applications.\nThose would be MzIO (basic functions), MzIO.Processing (data processing functions)\nand MzIO.SQL (functions to interact with the SQLite database). The other 4 projects are for 4 different\nfile formats. Currently supported formats are Wiff (wiff), Bruker (baf) , Thermo Fisher (raw) and MzML (xml).\nThe readers for those formats can be installed individually.\n\nCurrently, the nuget packages are only available at our github [nuget branch](https://github.com/CSBiology/MzIO/tree/nuget). At a later point they will be released at [nuget.org](www.nuget.org).\nYou can either install them from there or build the binaries yourself.\n\n#Building the binaries yourself\n\n* Install [.Net Core SDK](https://dotnet.microsoft.com/download)\n* Install the dotnet tool fake cli by \u0060dotnet tool install fake-cli -g\u0060 for global installation, or \u0060dotnet tool install fake-cli --tool-path yourtoolpath\u0060.\n* Download the [RawFileReader nuget packages for the .net version](https://planetorbitrap.com/rawfilereader) from Thermo Fisher Scientific and place them in \u0060lib/ThermoFisher\u0060.\n* Open the console and navigate to the root folder of the repository. Then run the command \u0060fake build\u0060\n\n###Important notes:\n####Wiff-Reader\n\n* You have to run the projects in 32 bit mode for the Wiff-Reader to work properly.\n* You need a Clearcore2 license for the Clearcore2 dlls used in this project.\n    * A dummy file for the license which can be replaced is already located at \u0060..\\src\\MzIO.Wiff\\License\u0060.\n\n####Bruker-Reader\n\n* You have to specify the platform on which the project runs, since bruker uses a different dll for 32 bit and 64 bit.\n* You need to install [Visual C\u002B\u002B Redistributable for Visual Studio 2012 Update 4](https://www.microsoft.com/en-us/download/details.aspx?id=30679).\n\n\n#Using the prerelease packages from the nuget branch\n\nIf you are using paket, add the following line to your \u0060paket.dependencies\u0060 file:\n\n\u0060git https://github.com/CSBiology/MzIO.git nuget Packages: /\u0060\n\nyou can then access the individual packages:\n\n\u0060nuget MzIO\u0060 \u003Cbr\u003E\n\n\u0060nuget MzIO.Processing\u0060 \u003Cbr\u003E\n\n\u0060nuget MzIO.Wiff\u0060 \u003Cbr\u003E\n\n\u0060nuget MzIO.Bruker\u0060 \u003Cbr\u003E\n\n\u0060nuget MzIO.Thermo\u0060 \u003Cbr\u003E\n\n\u0060nuget MzIO.MzML\u0060 \u003Cbr\u003E\n\n###Important notes:\n\n* The important notes for installing the binaries yourself apply to the nuget packages as well.\n* For the package MzIO.Thermo you need to do the following steps if you are managing your dependencies with paket:\n    * Download the [RawFileReader nuget packages for the .net version](https://planetorbitrap.com/rawfilereader) from Thermo Fisher Scientific and place them in \u0060lib/ThermoFisher\u0060 or another folder of your choice\n    * Add \u003Cbr\u003E\n        \u0060source lib/ThermoFisher\u0060 (source may vary based on your chosen location)\u003Cbr\u003E\n         \u0060nuget ThermoFisher.CommonCore.BackgroundSubtraction\u0060\u003Cbr\u003E\n         \u0060nuget ThermoFisher.CommonCore.Data\u0060\u003Cbr\u003E\n         \u0060nuget ThermoFisher.CommonCore.MassPrecisionEstimator\u0060\u003Cbr\u003E\n         \u0060nuget ThermoFisher.CommonCore.RawFileReader\u0060\u003Cbr\u003E\n      to your paket.dependencies file\n    * Run the command \u0060paket update\u0060, followed by \u0060fake build\u0060\n*)"},{"uri":"/MzIO/tools/ProcessingFunctions.html","title":"ProcessingFunctions","content":""}]