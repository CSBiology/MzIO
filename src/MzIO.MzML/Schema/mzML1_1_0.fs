
namespace MzML_1_1_0
    // Generated by F# CodeDom
    #nowarn "49" // uppercase argument names
    #nowarn "67" // this type test or downcast will always hold
    #nowarn "66" // this upcast is unnecessary - the types are identical
    #nowarn "58" // possible incorrect indentation..
    #nowarn "57" // do not use create_DelegateEvent
    #nowarn "51" // address-of operator can occur in the code
    #nowarn "1183" // unused 'this' reference
    
    exception ReturnException254e05a785a548c8abee73cf9c72d7e1 of obj
    exception ReturnNoneException254e05a785a548c8abee73cf9c72d7e1
    [<AutoOpen>]
    module FuncConvertFinalOverload254e05a785a548c8abee73cf9c72d7e1 =
      // This extension member adds to the FuncConvert type and is the last resort member in the method overloading rules. 
      type global.Microsoft.FSharp.Core.FuncConvert with
          /// A utility function to convert function values from tupled to curried form
          static member FuncFromTupled (f:'T -> 'Res) = f
    
    type
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)mzMLType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable cvListField:CVListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable fileDescriptionField:FileDescriptionType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable referenceableParamGroupListField:ReferenceableParamGroupListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sampleListField:SampleListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable softwareListField:SoftwareListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable scanSettingsListField:ScanSettingsListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable instrumentConfigurationListField:InstrumentConfigurationListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable dataProcessingListField:DataProcessingListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable runField:RunType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable accessionField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable versionField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            /// <remarks/>
            
            abstract cvList : CVListType with get,set
            default this.cvList
                with get() : CVListType =
                    ((this.cvListField :> obj) :?> CVListType)
                and set(value:CVListType) : unit =
                    this.cvListField <- value
            
            /// <remarks/>
            
            abstract fileDescription : FileDescriptionType with get,set
            default this.fileDescription
                with get() : FileDescriptionType =
                    ((this.fileDescriptionField :> obj) :?> FileDescriptionType)
                and set(value:FileDescriptionType) : unit =
                    this.fileDescriptionField <- value
            
            /// <remarks/>
            
            abstract referenceableParamGroupList : ReferenceableParamGroupListType with get,set
            default this.referenceableParamGroupList
                with get() : ReferenceableParamGroupListType =
                    ((this.referenceableParamGroupListField :> obj) :?> ReferenceableParamGroupListType)
                and set(value:ReferenceableParamGroupListType) : unit =
                    this.referenceableParamGroupListField <- value
            
            /// <remarks/>
            
            abstract sampleList : SampleListType with get,set
            default this.sampleList
                with get() : SampleListType =
                    ((this.sampleListField :> obj) :?> SampleListType)
                and set(value:SampleListType) : unit =
                    this.sampleListField <- value
            
            /// <remarks/>
            
            abstract softwareList : SoftwareListType with get,set
            default this.softwareList
                with get() : SoftwareListType =
                    ((this.softwareListField :> obj) :?> SoftwareListType)
                and set(value:SoftwareListType) : unit =
                    this.softwareListField <- value
            
            /// <remarks/>
            
            abstract scanSettingsList : ScanSettingsListType with get,set
            default this.scanSettingsList
                with get() : ScanSettingsListType =
                    ((this.scanSettingsListField :> obj) :?> ScanSettingsListType)
                and set(value:ScanSettingsListType) : unit =
                    this.scanSettingsListField <- value
            
            /// <remarks/>
            
            abstract instrumentConfigurationList : InstrumentConfigurationListType with get,set
            default this.instrumentConfigurationList
                with get() : InstrumentConfigurationListType =
                    ((this.instrumentConfigurationListField :> obj) :?> InstrumentConfigurationListType)
                and set(value:InstrumentConfigurationListType) : unit =
                    this.instrumentConfigurationListField <- value
            
            /// <remarks/>
            
            abstract dataProcessingList : DataProcessingListType with get,set
            default this.dataProcessingList
                with get() : DataProcessingListType =
                    ((this.dataProcessingListField :> obj) :?> DataProcessingListType)
                and set(value:DataProcessingListType) : unit =
                    this.dataProcessingListField <- value
            
            /// <remarks/>
            
            abstract run : RunType with get,set
            default this.run
                with get() : RunType =
                    ((this.runField :> obj) :?> RunType)
                and set(value:RunType) : unit =
                    this.runField <- value
            
            /// <remarks/>
            
            abstract accession : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.accession
                with get() : string =
                    this.accessionField
                and set(value:string) : unit =
                    this.accessionField <- value
            
            /// <remarks/>
            
            abstract version : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.version
                with get() : string =
                    this.versionField
                and set(value:string) : unit =
                    this.versionField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)CVListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable cvField:CVType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract cv : CVType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("cv")>]
            
            default this.cv
                with get() : CVType[] =
                    ((this.cvField :> obj) :?> CVType[])
                and set(value:CVType[]) : unit =
                    this.cvField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)CVType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable fullNameField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable versionField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable uRIField:string
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract fullName : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.fullName
                with get() : string =
                    this.fullNameField
                and set(value:string) : unit =
                    this.fullNameField <- value
            
            /// <remarks/>
            
            abstract version : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.version
                with get() : string =
                    this.versionField
                and set(value:string) : unit =
                    this.versionField <- value
            
            /// <remarks/>
            
            abstract URI : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")>]
            
            default this.URI
                with get() : string =
                    this.uRIField
                and set(value:string) : unit =
                    this.uRIField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)FileDescriptionType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable fileContentField:ParamGroupType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceFileListField:SourceFileListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable contactField:ParamGroupType[]
            /// <remarks/>
            
            abstract fileContent : ParamGroupType with get,set
            default this.fileContent
                with get() : ParamGroupType =
                    ((this.fileContentField :> obj) :?> ParamGroupType)
                and set(value:ParamGroupType) : unit =
                    this.fileContentField <- value
            
            /// <remarks/>
            
            abstract sourceFileList : SourceFileListType with get,set
            default this.sourceFileList
                with get() : SourceFileListType =
                    ((this.sourceFileListField :> obj) :?> SourceFileListType)
                and set(value:SourceFileListType) : unit =
                    this.sourceFileListField <- value
            
            /// <remarks/>
            
            abstract contact : ParamGroupType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("contact")>]
            
            default this.contact
                with get() : ParamGroupType[] =
                    ((this.contactField :> obj) :?> ParamGroupType[])
                and set(value:ParamGroupType[]) : unit =
                    this.contactField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ParamGroupType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable referenceableParamGroupRefField:ReferenceableParamGroupRefType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable cvParamField:CVParamType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable userParamField:UserParamType[]
            /// <remarks/>
            
            abstract referenceableParamGroupRef : ReferenceableParamGroupRefType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("referenceableParamGroupRef")>]
            
            default this.referenceableParamGroupRef
                with get() : ReferenceableParamGroupRefType[] =
                    ((this.referenceableParamGroupRefField :> obj) :?> ReferenceableParamGroupRefType[])
                and set(value:ReferenceableParamGroupRefType[]) : unit =
                    this.referenceableParamGroupRefField <- value
            
            /// <remarks/>
            
            abstract cvParam : CVParamType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("cvParam")>]
            
            default this.cvParam
                with get() : CVParamType[] =
                    ((this.cvParamField :> obj) :?> CVParamType[])
                and set(value:CVParamType[]) : unit =
                    this.cvParamField <- value
            
            /// <remarks/>
            
            abstract userParam : UserParamType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("userParam")>]
            
            default this.userParam
                with get() : UserParamType[] =
                    ((this.userParamField :> obj) :?> UserParamType[])
                and set(value:UserParamType[]) : unit =
                    this.userParamField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ReferenceableParamGroupRefType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable refField:string
            /// <remarks/>
            
            abstract ref : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.ref
                with get() : string =
                    this.refField
                and set(value:string) : unit =
                    this.refField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)CVParamType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable cvRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable accessionField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable valueField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable nameField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable unitAccessionField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable unitNameField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable unitCvRefField:string
            /// <remarks/>
            
            abstract cvRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.cvRef
                with get() : string =
                    this.cvRefField
                and set(value:string) : unit =
                    this.cvRefField <- value
            
            /// <remarks/>
            
            abstract accession : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.accession
                with get() : string =
                    this.accessionField
                and set(value:string) : unit =
                    this.accessionField <- value
            
            /// <remarks/>
            
            abstract value : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.value
                with get() : string =
                    this.valueField
                and set(value:string) : unit =
                    this.valueField <- value
            
            /// <remarks/>
            
            abstract name : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.name
                with get() : string =
                    this.nameField
                and set(value:string) : unit =
                    this.nameField <- value
            
            /// <remarks/>
            
            abstract unitAccession : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.unitAccession
                with get() : string =
                    this.unitAccessionField
                and set(value:string) : unit =
                    this.unitAccessionField <- value
            
            /// <remarks/>
            
            abstract unitName : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.unitName
                with get() : string =
                    this.unitNameField
                and set(value:string) : unit =
                    this.unitNameField <- value
            
            /// <remarks/>
            
            abstract unitCvRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.unitCvRef
                with get() : string =
                    this.unitCvRefField
                and set(value:string) : unit =
                    this.unitCvRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)UserParamType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable nameField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable typeField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable valueField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable unitAccessionField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable unitNameField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable unitCvRefField:string
            /// <remarks/>
            
            abstract name : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.name
                with get() : string =
                    this.nameField
                and set(value:string) : unit =
                    this.nameField <- value
            
            /// <remarks/>
            
            abstract ``type`` : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.``type``
                with get() : string =
                    this.typeField
                and set(value:string) : unit =
                    this.typeField <- value
            
            /// <remarks/>
            
            abstract value : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.value
                with get() : string =
                    this.valueField
                and set(value:string) : unit =
                    this.valueField <- value
            
            /// <remarks/>
            
            abstract unitAccession : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.unitAccession
                with get() : string =
                    this.unitAccessionField
                and set(value:string) : unit =
                    this.unitAccessionField <- value
            
            /// <remarks/>
            
            abstract unitName : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.unitName
                with get() : string =
                    this.unitNameField
                and set(value:string) : unit =
                    this.unitNameField <- value
            
            /// <remarks/>
            
            abstract unitCvRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.unitCvRef
                with get() : string =
                    this.unitCvRefField
                and set(value:string) : unit =
                    this.unitCvRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SourceFileListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceFileField:SourceFileType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract sourceFile : SourceFileType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("sourceFile")>]
            
            default this.sourceFile
                with get() : SourceFileType[] =
                    ((this.sourceFileField :> obj) :?> SourceFileType[])
                and set(value:SourceFileType[]) : unit =
                    this.sourceFileField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SourceFileType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable nameField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable locationField:string
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract name : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.name
                with get() : string =
                    this.nameField
                and set(value:string) : unit =
                    this.nameField <- value
            
            /// <remarks/>
            
            abstract location : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")>]
            
            default this.location
                with get() : string =
                    this.locationField
                and set(value:string) : unit =
                    this.locationField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ReferenceableParamGroupListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable referenceableParamGroupField:ReferenceableParamGroupType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract referenceableParamGroup : ReferenceableParamGroupType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("referenceableParamGroup")>]
            
            default this.referenceableParamGroup
                with get() : ReferenceableParamGroupType[] =
                    ((this.referenceableParamGroupField :> obj) :?> ReferenceableParamGroupType[])
                and set(value:ReferenceableParamGroupType[]) : unit =
                    this.referenceableParamGroupField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ReferenceableParamGroupType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable cvParamField:CVParamType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable userParamField:UserParamType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            /// <remarks/>
            
            abstract cvParam : CVParamType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("cvParam")>]
            
            default this.cvParam
                with get() : CVParamType[] =
                    ((this.cvParamField :> obj) :?> CVParamType[])
                and set(value:CVParamType[]) : unit =
                    this.cvParamField <- value
            
            /// <remarks/>
            
            abstract userParam : UserParamType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("userParam")>]
            
            default this.userParam
                with get() : UserParamType[] =
                    ((this.userParamField :> obj) :?> UserParamType[])
                and set(value:UserParamType[]) : unit =
                    this.userParamField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SampleListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sampleField:SampleType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract sample : SampleType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("sample")>]
            
            default this.sample
                with get() : SampleType[] =
                    ((this.sampleField :> obj) :?> SampleType[])
                and set(value:SampleType[]) : unit =
                    this.sampleField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SampleType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable nameField:string
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract name : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.name
                with get() : string =
                    this.nameField
                and set(value:string) : unit =
                    this.nameField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SoftwareListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable softwareField:SoftwareType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract software : SoftwareType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("software")>]
            
            default this.software
                with get() : SoftwareType[] =
                    ((this.softwareField :> obj) :?> SoftwareType[])
                and set(value:SoftwareType[]) : unit =
                    this.softwareField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SoftwareType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable versionField:string
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract version : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.version
                with get() : string =
                    this.versionField
                and set(value:string) : unit =
                    this.versionField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ScanSettingsListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable scanSettingsField:ScanSettingsType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract scanSettings : ScanSettingsType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("scanSettings")>]
            
            default this.scanSettings
                with get() : ScanSettingsType[] =
                    ((this.scanSettingsField :> obj) :?> ScanSettingsType[])
                and set(value:ScanSettingsType[]) : unit =
                    this.scanSettingsField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ScanSettingsType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceFileRefListField:SourceFileRefListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable targetListField:TargetListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            /// <remarks/>
            
            abstract sourceFileRefList : SourceFileRefListType with get,set
            default this.sourceFileRefList
                with get() : SourceFileRefListType =
                    ((this.sourceFileRefListField :> obj) :?> SourceFileRefListType)
                and set(value:SourceFileRefListType) : unit =
                    this.sourceFileRefListField <- value
            
            /// <remarks/>
            
            abstract targetList : TargetListType with get,set
            default this.targetList
                with get() : TargetListType =
                    ((this.targetListField :> obj) :?> TargetListType)
                and set(value:TargetListType) : unit =
                    this.targetListField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SourceFileRefListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceFileRefField:SourceFileRefType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract sourceFileRef : SourceFileRefType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("sourceFileRef")>]
            
            default this.sourceFileRef
                with get() : SourceFileRefType[] =
                    ((this.sourceFileRefField :> obj) :?> SourceFileRefType[])
                and set(value:SourceFileRefType[]) : unit =
                    this.sourceFileRefField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SourceFileRefType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable refField:string
            /// <remarks/>
            
            abstract ref : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.ref
                with get() : string =
                    this.refField
                and set(value:string) : unit =
                    this.refField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)TargetListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable targetField:ParamGroupType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract target : ParamGroupType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("target")>]
            
            default this.target
                with get() : ParamGroupType[] =
                    ((this.targetField :> obj) :?> ParamGroupType[])
                and set(value:ParamGroupType[]) : unit =
                    this.targetField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)InstrumentConfigurationListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable instrumentConfigurationField:InstrumentConfigurationType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract instrumentConfiguration : InstrumentConfigurationType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("instrumentConfiguration")>]
            
            default this.instrumentConfiguration
                with get() : InstrumentConfigurationType[] =
                    ((this.instrumentConfigurationField :> obj) :?> InstrumentConfigurationType[])
                and set(value:InstrumentConfigurationType[]) : unit =
                    this.instrumentConfigurationField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)InstrumentConfigurationType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable componentListField:ComponentListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable softwareRefField:SoftwareRefType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable scanSettingsRefField:string
            /// <remarks/>
            
            abstract componentList : ComponentListType with get,set
            default this.componentList
                with get() : ComponentListType =
                    ((this.componentListField :> obj) :?> ComponentListType)
                and set(value:ComponentListType) : unit =
                    this.componentListField <- value
            
            /// <remarks/>
            
            abstract softwareRef : SoftwareRefType with get,set
            default this.softwareRef
                with get() : SoftwareRefType =
                    ((this.softwareRefField :> obj) :?> SoftwareRefType)
                and set(value:SoftwareRefType) : unit =
                    this.softwareRefField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract scanSettingsRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.scanSettingsRef
                with get() : string =
                    this.scanSettingsRefField
                and set(value:string) : unit =
                    this.scanSettingsRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ComponentListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceField:SourceComponentType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable analyzerField:AnalyzerComponentType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable detectorField:DetectorComponentType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract source : SourceComponentType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("source")>]
            
            default this.source
                with get() : SourceComponentType[] =
                    ((this.sourceField :> obj) :?> SourceComponentType[])
                and set(value:SourceComponentType[]) : unit =
                    this.sourceField <- value
            
            /// <remarks/>
            
            abstract analyzer : AnalyzerComponentType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("analyzer")>]
            
            default this.analyzer
                with get() : AnalyzerComponentType[] =
                    ((this.analyzerField :> obj) :?> AnalyzerComponentType[])
                and set(value:AnalyzerComponentType[]) : unit =
                    this.analyzerField <- value
            
            /// <remarks/>
            
            abstract detector : DetectorComponentType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("detector")>]
            
            default this.detector
                with get() : DetectorComponentType[] =
                    ((this.detectorField :> obj) :?> DetectorComponentType[])
                and set(value:DetectorComponentType[]) : unit =
                    this.detectorField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SourceComponentType = class
            inherit ComponentType 
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ComponentType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable orderField:int
            /// <remarks/>
            
            abstract order : int with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.order
                with get() : int =
                    this.orderField
                and set(value:int) : unit =
                    this.orderField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)AnalyzerComponentType = class
            inherit ComponentType 
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)DetectorComponentType = class
            inherit ComponentType 
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SoftwareRefType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable refField:string
            /// <remarks/>
            
            abstract ref : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.ref
                with get() : string =
                    this.refField
                and set(value:string) : unit =
                    this.refField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)DataProcessingListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable dataProcessingField:DataProcessingType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract dataProcessing : DataProcessingType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("dataProcessing")>]
            
            default this.dataProcessing
                with get() : DataProcessingType[] =
                    ((this.dataProcessingField :> obj) :?> DataProcessingType[])
                and set(value:DataProcessingType[]) : unit =
                    this.dataProcessingField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)DataProcessingType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable processingMethodField:ProcessingMethodType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            /// <remarks/>
            
            abstract processingMethod : ProcessingMethodType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("processingMethod")>]
            
            default this.processingMethod
                with get() : ProcessingMethodType[] =
                    ((this.processingMethodField :> obj) :?> ProcessingMethodType[])
                and set(value:ProcessingMethodType[]) : unit =
                    this.processingMethodField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ProcessingMethodType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable orderField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable softwareRefField:string
            /// <remarks/>
            
            abstract order : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.order
                with get() : string =
                    this.orderField
                and set(value:string) : unit =
                    this.orderField <- value
            
            /// <remarks/>
            
            abstract softwareRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.softwareRef
                with get() : string =
                    this.softwareRefField
                and set(value:string) : unit =
                    this.softwareRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)RunType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable spectrumListField:SpectrumListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable chromatogramListField:ChromatogramListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable defaultInstrumentConfigurationRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable defaultSourceFileRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sampleRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable startTimeStampField:System.DateTime
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable startTimeStampFieldSpecified:bool
            /// <remarks/>
            
            abstract spectrumList : SpectrumListType with get,set
            default this.spectrumList
                with get() : SpectrumListType =
                    ((this.spectrumListField :> obj) :?> SpectrumListType)
                and set(value:SpectrumListType) : unit =
                    this.spectrumListField <- value
            
            /// <remarks/>
            
            abstract chromatogramList : ChromatogramListType with get,set
            default this.chromatogramList
                with get() : ChromatogramListType =
                    ((this.chromatogramListField :> obj) :?> ChromatogramListType)
                and set(value:ChromatogramListType) : unit =
                    this.chromatogramListField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract defaultInstrumentConfigurationRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.defaultInstrumentConfigurationRef
                with get() : string =
                    this.defaultInstrumentConfigurationRefField
                and set(value:string) : unit =
                    this.defaultInstrumentConfigurationRefField <- value
            
            /// <remarks/>
            
            abstract defaultSourceFileRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.defaultSourceFileRef
                with get() : string =
                    this.defaultSourceFileRefField
                and set(value:string) : unit =
                    this.defaultSourceFileRefField <- value
            
            /// <remarks/>
            
            abstract sampleRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.sampleRef
                with get() : string =
                    this.sampleRefField
                and set(value:string) : unit =
                    this.sampleRefField <- value
            
            /// <remarks/>
            
            abstract startTimeStamp : System.DateTime with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.startTimeStamp
                with get() : System.DateTime =
                    this.startTimeStampField
                and set(value:System.DateTime) : unit =
                    this.startTimeStampField <- value
            
            /// <remarks/>
            
            abstract startTimeStampSpecified : bool with get,set
            [<System.Xml.Serialization.XmlIgnoreAttribute>]
            
            default this.startTimeStampSpecified
                with get() : bool =
                    this.startTimeStampFieldSpecified
                and set(value:bool) : unit =
                    this.startTimeStampFieldSpecified <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SpectrumListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable spectrumField:SpectrumType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable defaultDataProcessingRefField:string
            /// <remarks/>
            
            abstract spectrum : SpectrumType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("spectrum")>]
            
            default this.spectrum
                with get() : SpectrumType[] =
                    ((this.spectrumField :> obj) :?> SpectrumType[])
                and set(value:SpectrumType[]) : unit =
                    this.spectrumField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
            
            /// <remarks/>
            
            abstract defaultDataProcessingRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.defaultDataProcessingRef
                with get() : string =
                    this.defaultDataProcessingRefField
                and set(value:string) : unit =
                    this.defaultDataProcessingRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SpectrumType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable scanListField:ScanListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable precursorListField:PrecursorListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable productListField:ProductListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable binaryDataArrayListField:BinaryDataArrayListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable spotIDField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable indexField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable defaultArrayLengthField:int
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable dataProcessingRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceFileRefField:string
            /// <remarks/>
            
            abstract scanList : ScanListType with get,set
            default this.scanList
                with get() : ScanListType =
                    ((this.scanListField :> obj) :?> ScanListType)
                and set(value:ScanListType) : unit =
                    this.scanListField <- value
            
            /// <remarks/>
            
            abstract precursorList : PrecursorListType with get,set
            default this.precursorList
                with get() : PrecursorListType =
                    ((this.precursorListField :> obj) :?> PrecursorListType)
                and set(value:PrecursorListType) : unit =
                    this.precursorListField <- value
            
            /// <remarks/>
            
            abstract productList : ProductListType with get,set
            default this.productList
                with get() : ProductListType =
                    ((this.productListField :> obj) :?> ProductListType)
                and set(value:ProductListType) : unit =
                    this.productListField <- value
            
            /// <remarks/>
            
            abstract binaryDataArrayList : BinaryDataArrayListType with get,set
            default this.binaryDataArrayList
                with get() : BinaryDataArrayListType =
                    ((this.binaryDataArrayListField :> obj) :?> BinaryDataArrayListType)
                and set(value:BinaryDataArrayListType) : unit =
                    this.binaryDataArrayListField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract spotID : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.spotID
                with get() : string =
                    this.spotIDField
                and set(value:string) : unit =
                    this.spotIDField <- value
            
            /// <remarks/>
            
            abstract index : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.index
                with get() : string =
                    this.indexField
                and set(value:string) : unit =
                    this.indexField <- value
            
            /// <remarks/>
            
            abstract defaultArrayLength : int with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.defaultArrayLength
                with get() : int =
                    this.defaultArrayLengthField
                and set(value:int) : unit =
                    this.defaultArrayLengthField <- value
            
            /// <remarks/>
            
            abstract dataProcessingRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.dataProcessingRef
                with get() : string =
                    this.dataProcessingRefField
                and set(value:string) : unit =
                    this.dataProcessingRefField <- value
            
            /// <remarks/>
            
            abstract sourceFileRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.sourceFileRef
                with get() : string =
                    this.sourceFileRefField
                and set(value:string) : unit =
                    this.sourceFileRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ScanListType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable scanField:ScanType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract scan : ScanType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("scan")>]
            
            default this.scan
                with get() : ScanType[] =
                    ((this.scanField :> obj) :?> ScanType[])
                and set(value:ScanType[]) : unit =
                    this.scanField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ScanType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable scanWindowListField:ScanWindowListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable spectrumRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceFileRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable externalSpectrumIDField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable instrumentConfigurationRefField:string
            /// <remarks/>
            
            abstract scanWindowList : ScanWindowListType with get,set
            default this.scanWindowList
                with get() : ScanWindowListType =
                    ((this.scanWindowListField :> obj) :?> ScanWindowListType)
                and set(value:ScanWindowListType) : unit =
                    this.scanWindowListField <- value
            
            /// <remarks/>
            
            abstract spectrumRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.spectrumRef
                with get() : string =
                    this.spectrumRefField
                and set(value:string) : unit =
                    this.spectrumRefField <- value
            
            /// <remarks/>
            
            abstract sourceFileRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.sourceFileRef
                with get() : string =
                    this.sourceFileRefField
                and set(value:string) : unit =
                    this.sourceFileRefField <- value
            
            /// <remarks/>
            
            abstract externalSpectrumID : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.externalSpectrumID
                with get() : string =
                    this.externalSpectrumIDField
                and set(value:string) : unit =
                    this.externalSpectrumIDField <- value
            
            /// <remarks/>
            
            abstract instrumentConfigurationRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.instrumentConfigurationRef
                with get() : string =
                    this.instrumentConfigurationRefField
                and set(value:string) : unit =
                    this.instrumentConfigurationRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ScanWindowListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable scanWindowField:ParamGroupType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:int
            /// <remarks/>
            
            abstract scanWindow : ParamGroupType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("scanWindow")>]
            
            default this.scanWindow
                with get() : ParamGroupType[] =
                    ((this.scanWindowField :> obj) :?> ParamGroupType[])
                and set(value:ParamGroupType[]) : unit =
                    this.scanWindowField <- value
            
            /// <remarks/>
            
            abstract count : int with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.count
                with get() : int =
                    this.countField
                and set(value:int) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)PrecursorListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable precursorField:PrecursorType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract precursor : PrecursorType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("precursor")>]
            
            default this.precursor
                with get() : PrecursorType[] =
                    ((this.precursorField :> obj) :?> PrecursorType[])
                and set(value:PrecursorType[]) : unit =
                    this.precursorField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)PrecursorType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable isolationWindowField:ParamGroupType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable selectedIonListField:SelectedIonListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable activationField:ParamGroupType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable spectrumRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable sourceFileRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable externalSpectrumIDField:string
            /// <remarks/>
            
            abstract isolationWindow : ParamGroupType with get,set
            default this.isolationWindow
                with get() : ParamGroupType =
                    ((this.isolationWindowField :> obj) :?> ParamGroupType)
                and set(value:ParamGroupType) : unit =
                    this.isolationWindowField <- value
            
            /// <remarks/>
            
            abstract selectedIonList : SelectedIonListType with get,set
            default this.selectedIonList
                with get() : SelectedIonListType =
                    ((this.selectedIonListField :> obj) :?> SelectedIonListType)
                and set(value:SelectedIonListType) : unit =
                    this.selectedIonListField <- value
            
            /// <remarks/>
            
            abstract activation : ParamGroupType with get,set
            default this.activation
                with get() : ParamGroupType =
                    ((this.activationField :> obj) :?> ParamGroupType)
                and set(value:ParamGroupType) : unit =
                    this.activationField <- value
            
            /// <remarks/>
            
            abstract spectrumRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.spectrumRef
                with get() : string =
                    this.spectrumRefField
                and set(value:string) : unit =
                    this.spectrumRefField <- value
            
            /// <remarks/>
            
            abstract sourceFileRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.sourceFileRef
                with get() : string =
                    this.sourceFileRefField
                and set(value:string) : unit =
                    this.sourceFileRefField <- value
            
            /// <remarks/>
            
            abstract externalSpectrumID : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.externalSpectrumID
                with get() : string =
                    this.externalSpectrumIDField
                and set(value:string) : unit =
                    this.externalSpectrumIDField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)SelectedIonListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable selectedIonField:ParamGroupType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract selectedIon : ParamGroupType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("selectedIon")>]
            
            default this.selectedIon
                with get() : ParamGroupType[] =
                    ((this.selectedIonField :> obj) :?> ParamGroupType[])
                and set(value:ParamGroupType[]) : unit =
                    this.selectedIonField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ProductListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable productField:ProductType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract product : ProductType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("product")>]
            
            default this.product
                with get() : ProductType[] =
                    ((this.productField :> obj) :?> ProductType[])
                and set(value:ProductType[]) : unit =
                    this.productField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ProductType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable isolationWindowField:ParamGroupType
            /// <remarks/>
            
            abstract isolationWindow : ParamGroupType with get,set
            default this.isolationWindow
                with get() : ParamGroupType =
                    ((this.isolationWindowField :> obj) :?> ParamGroupType)
                and set(value:ParamGroupType) : unit =
                    this.isolationWindowField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)BinaryDataArrayListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable binaryDataArrayField:BinaryDataArrayType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            /// <remarks/>
            
            abstract binaryDataArray : BinaryDataArrayType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("binaryDataArray")>]
            
            default this.binaryDataArray
                with get() : BinaryDataArrayType[] =
                    ((this.binaryDataArrayField :> obj) :?> BinaryDataArrayType[])
                and set(value:BinaryDataArrayType[]) : unit =
                    this.binaryDataArrayField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)BinaryDataArrayType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable binaryField:System.Byte[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable arrayLengthField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable dataProcessingRefField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable encodedLengthField:string
            /// <remarks/>
            
            abstract binary : System.Byte[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")>]
            
            default this.binary
                with get() : System.Byte[] =
                    ((this.binaryField :> obj) :?> System.Byte[])
                and set(value:System.Byte[]) : unit =
                    this.binaryField <- value
            
            /// <remarks/>
            
            abstract arrayLength : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.arrayLength
                with get() : string =
                    this.arrayLengthField
                and set(value:string) : unit =
                    this.arrayLengthField <- value
            
            /// <remarks/>
            
            abstract dataProcessingRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.dataProcessingRef
                with get() : string =
                    this.dataProcessingRefField
                and set(value:string) : unit =
                    this.dataProcessingRefField <- value
            
            /// <remarks/>
            
            abstract encodedLength : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.encodedLength
                with get() : string =
                    this.encodedLengthField
                and set(value:string) : unit =
                    this.encodedLengthField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ChromatogramListType = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable chromatogramField:ChromatogramType[]
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable countField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable defaultDataProcessingRefField:string
            /// <remarks/>
            
            abstract chromatogram : ChromatogramType[] with get,set
            [<System.Xml.Serialization.XmlElementAttribute("chromatogram")>]
            
            default this.chromatogram
                with get() : ChromatogramType[] =
                    ((this.chromatogramField :> obj) :?> ChromatogramType[])
                and set(value:ChromatogramType[]) : unit =
                    this.chromatogramField <- value
            
            /// <remarks/>
            
            abstract count : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.count
                with get() : string =
                    this.countField
                and set(value:string) : unit =
                    this.countField <- value
            
            /// <remarks/>
            
            abstract defaultDataProcessingRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.defaultDataProcessingRef
                with get() : string =
                    this.defaultDataProcessingRefField
                and set(value:string) : unit =
                    this.defaultDataProcessingRefField <- value
        end
    
    and
        /// <remarks/>
        [<System.Xml.Serialization.XmlTypeAttribute(Namespace="http://psi.hupo.org/ms/mzml")>]
        
        (* partial *)ChromatogramType = class
            inherit ParamGroupType 
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable precursorField:PrecursorType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable productField:ProductType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable binaryDataArrayListField:BinaryDataArrayListType
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable idField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable indexField:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable defaultArrayLengthField:int
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable dataProcessingRefField:string
            /// <remarks/>
            
            abstract precursor : PrecursorType with get,set
            default this.precursor
                with get() : PrecursorType =
                    ((this.precursorField :> obj) :?> PrecursorType)
                and set(value:PrecursorType) : unit =
                    this.precursorField <- value
            
            /// <remarks/>
            
            abstract product : ProductType with get,set
            default this.product
                with get() : ProductType =
                    ((this.productField :> obj) :?> ProductType)
                and set(value:ProductType) : unit =
                    this.productField <- value
            
            /// <remarks/>
            
            abstract binaryDataArrayList : BinaryDataArrayListType with get,set
            default this.binaryDataArrayList
                with get() : BinaryDataArrayListType =
                    ((this.binaryDataArrayListField :> obj) :?> BinaryDataArrayListType)
                and set(value:BinaryDataArrayListType) : unit =
                    this.binaryDataArrayListField <- value
            
            /// <remarks/>
            
            abstract id : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.id
                with get() : string =
                    this.idField
                and set(value:string) : unit =
                    this.idField <- value
            
            /// <remarks/>
            
            abstract index : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")>]
            
            default this.index
                with get() : string =
                    this.indexField
                and set(value:string) : unit =
                    this.indexField <- value
            
            /// <remarks/>
            
            abstract defaultArrayLength : int with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute>]
            
            default this.defaultArrayLength
                with get() : int =
                    this.defaultArrayLengthField
                and set(value:int) : unit =
                    this.defaultArrayLengthField <- value
            
            /// <remarks/>
            
            abstract dataProcessingRef : string with get,set
            [<System.Xml.Serialization.XmlAttributeAttribute(DataType="IDREF")>]
            
            default this.dataProcessingRef
                with get() : string =
                    this.dataProcessingRefField
                and set(value:string) : unit =
                    this.dataProcessingRefField <- value
        end